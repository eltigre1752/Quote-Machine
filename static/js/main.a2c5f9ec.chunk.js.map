{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["colorsArray","App","useState","quote","setQuote","author","setAuthor","index","setIndex","quoteArr","setQuoteArr","bgColor","setBgColor","fetchQuotes","a","fetch","respond","json","result","quotes","useEffect","className","style","backgroundColor","color","id","icon","faQuoteLeft","href","encodeURI","faTwitter","faTumblr","onClick","randomIndex","Math","floor","random","length","colorIndex","generateRandom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAYeA,G,MAZK,CAAC,UAAW,UAAW,UAAW,UAAW,UAC7D,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,6BC2DjCC,MAzDf,WACE,MAA0BC,mBAAS,+EAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,eAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAgCN,mBAAS,MAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,mBAAS,OAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAEMC,EAAW,uCAAG,8BAAAC,EAAA,sEACIC,MATT,0IAQK,cACZC,EADY,gBAEGA,EAAQC,OAFX,OAEZC,EAFY,OAGlBR,EAAYQ,EAAOC,QAHD,2CAAH,qDAmBjB,OAbAC,qBAAU,WACRP,MACA,IAYA,qBAAKQ,UAAU,MAAf,SACE,qBAAKA,UAAU,UACVC,MAAO,CAACC,gBAAiBZ,EAASa,MAAOb,GAD9C,SAEE,sBAAKc,GAAG,YAAR,UACE,oBAAGA,GAAG,OAAN,UACA,cAAC,IAAD,CAAiBC,KAAMC,MADvB,IACwCxB,KAExC,oBAAGsB,GAAG,SAAN,eACKpB,KAEL,mBAAIiB,MAAO,CAACC,gBAAiBZ,GACzBc,GAAG,cAAcJ,UAAU,MAC3BO,KAAMC,UAAU,4CAAD,OAA6C1B,EAA7C,aAAuDE,IAF1E,SAGE,cAAC,IAAD,CAAiBqB,KAAMI,QAEzB,mBAAIR,MAAO,CAACC,gBAAiBZ,GACzBc,GAAG,cAAcJ,UAAU,MAC3BO,KAAMC,UAAU,gCAAD,OAAiC1B,EAAjC,aAA2CE,IAF9D,SAGE,cAAC,IAAD,CAAiBqB,KAAMK,QAEzB,wBAAQT,MAAO,CAACC,gBAAiBZ,GAAUc,GAAG,YACtCJ,UAAU,MAAMW,QAAW,kBA/BpB,WACrB,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW3B,EAAS4B,QAClDC,EAAaJ,KAAKC,MAAMD,KAAKE,SAAWpC,EAAYqC,QAC1D7B,EAASyB,GACT3B,EAAUG,EAASF,GAAOF,QAC1BD,EAASK,EAASF,GAAOJ,OACzBS,EAAWZ,EAAYsC,IAyBwBC,IADzC,+BC9CKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2c5f9ec.chunk.js","sourcesContent":["const colorsArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\n\r\nexport default colorsArray;","\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport colorsArray from './colorsArray.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faTumblr } from '@fortawesome/free-brands-svg-icons';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\n\n\n\nconst quoteAPI = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\" \nfunction App() {\n  const [quote, setQuote] = useState(\"Life isn’t about getting and having, it’s about giving and being.\");\n  const [author, setAuthor] = useState(\"Kevin Kruse\");\n  const [index, setIndex] = useState(0);\n  const [quoteArr, setQuoteArr] = useState(null);\n  const [bgColor, setBgColor] = useState('red');\n\n  const fetchQuotes = async () => {\n    const respond = await fetch(quoteAPI);\n    const result = await respond.json();\n    setQuoteArr(result.quotes); \n  }\n\n  useEffect(() => {\n    fetchQuotes();\n  },[])\n\n  const generateRandom = () => {\n    const randomIndex = Math.floor(Math.random() * quoteArr.length);\n    const colorIndex = Math.floor(Math.random() * colorsArray.length);\n    setIndex(randomIndex);\n    setAuthor(quoteArr[index].author);\n    setQuote(quoteArr[index].quote);\n    setBgColor(colorsArray[colorIndex]);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\" \n           style={{backgroundColor: bgColor, color: bgColor}}>\n        <div id=\"quote-box\">\n          <p id=\"text\">\n          <FontAwesomeIcon icon={faQuoteLeft} /> {quote}\n          </p>\n          <p id=\"author\">\n            - {author}\n          </p>\n          <a  style={{backgroundColor: bgColor}} \n              id=\"tweet-quote\" className=\"btn\" \n              href={encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} -${author}`)}>\n            <FontAwesomeIcon icon={faTwitter} />\n          </a>\n          <a  style={{backgroundColor: bgColor}} \n              id=\"tweet-quote\" className=\"btn\" \n              href={encodeURI(`https://www.tumblr.com/?text=${quote} -${author}`)}>\n            <FontAwesomeIcon icon={faTumblr} />\n          </a>\n          <button style={{backgroundColor: bgColor}} id=\"new-quote\" \n                  className=\"btn\" onClick = {() => generateRandom()}>\n            New Quote\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}